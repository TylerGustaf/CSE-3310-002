//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: ContentFilteredTopicData.h
//  Source: ../idl/ContentFilteredTopicData.idl
//  Generated: Mon Feb  6 23:21:26 2017
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _CONTENTFILTEREDTOPICDATA_H_
#define _CONTENTFILTEREDTOPICDATA_H_
#ifndef OPENSPLICE_ISOCXX_PSM
#define OPENSPLICE_ISOCXX_PSM
#endif

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include <dds/core/ddscore.hpp>


namespace StockMarket
{
   class Stock;

   class Stock OSPL_DDS_FINAL
   {
   public:
         Stock() {}
         explicit Stock(
                  const ::std::string& ticker,
                  DDS::Float price)         :
                           ticker_(ticker),
                           price_(price) {}
#ifdef OSPL_DDS_CXX11
#  ifdef OSPL_CXX11_NO_FUNCTION_DEFAULTS
         Stock(const Stock& _other)
         :
                           ticker_(_other.ticker_),
                           price_(_other.price_)
         {}
         Stock(Stock&& _other)
         :
                           ticker_(::std::move(_other.ticker_)),
                           price_(::std::move(_other.price_))
         {}
         Stock& operator=(Stock&& _other)
         {
                  if (this != &_other)
                  {
                           ticker_ = ::std::move(_other.ticker_);
                           price_ = ::std::move(_other.price_);
                  }
                  return *this;
         }
         Stock& operator=(const Stock& _other)
         {
                  if (this != &_other)
                  {
                           ticker_ = _other.ticker_;
                           price_ = _other.price_;
                  }
                  return *this;
         }
#  else
         Stock(const Stock& _other) = default;
         Stock(Stock&& _other) = default;
         Stock& operator=(Stock&& _other) = default;
         Stock& operator=(const Stock& _other) = default;
#  endif
#endif
         const ::std::string& ticker() const { return this->ticker_; }
         ::std::string& ticker() { return this->ticker_; }
         void ticker(const ::std::string& _val_) { this->ticker_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void ticker(::std::string&& _val_) { this->ticker_ = _val_; }
#endif
         DDS::Float price() const { return this->price_; }
         DDS::Float& price() { return this->price_; }
         void price(DDS::Float _val_) { this->price_ = _val_; }
#ifdef OSPL_DDS_CXX11
         void price(DDS::Float&& _val_) { this->price_ = _val_; }
#endif
         bool operator==(const Stock& _other) const
         {
                  return ticker_ == _other.ticker_ &&
                  price_ == _other.price_;
         }
         bool operator!=(const Stock& other) const
         {
                  return !(*this == other);
         }
         ::std::string ticker_;
         DDS::Float price_;
   };

}




#endif 
